# MagicCursorrules - Master Repository

## Core Principles and Guidelines

- Use Claude 3.7 Sonnet with reasoning for all AI-assisted tasks
- Follow best practices for the specific languages/frameworks being used
- Maintain clean, DRY, and SOLID code principles
- Provide proper error handling and edge case considerations

## Advanced Rules Architecture

This project utilizes an advanced modular cursor rules architecture:

- **Root-level `.cursorrules`**: This file contains high-level project information and the Multi-Agent Scratchpad
- **Modular rules in `.cursor/rules/`**: Specific domain rules organized in `.mdc` files:
  - `frontend.mdc`: Guidelines for React, Next.js, TypeScript, and Tailwind development
  - `backend.mdc`: Guidelines for Python and FastAPI development
  - `ai-integration.mdc`: Patterns for integrating AI models and APIs
  - `multi-agent.mdc`: Guidelines for implementing multi-agent systems
  - `tooling.mdc`: Best practices for tools and utilities

### Benefits of This Architecture

- **File-specific Rules**: Rules are applied based on file patterns, so you get specialized assistance
- **Separation of Concerns**: Each rule file focuses on a specific domain or technology
- **Maintainability**: Easier to update specific rule sets without modifying the entire configuration
- **Discoverability**: Structure makes it easy to find and reference specific guidelines
- **Scalability**: Add new rule categories as your project evolves

See `docs/cursor_rules.md` for detailed documentation on this architecture.

## Multi-Agent Scratchpad

### Background and Motivation
This project aims to build a master repository of high-quality cursorrules that enhance AI-assisted development in Cursor. By analyzing patterns from existing cursorrules and implementing advanced features like the Multi-Agent system, we can create more effective AI collaboration tools. The cursorrules serve as specialized instructions that help AI better understand project context, coding standards, and domain-specific requirements.

### Key Challenges and Analysis
1. Diverse Development Scenarios: Different development contexts (frontend, backend, AI integration) require specialized guidelines.
2. Balancing Specificity vs. Generality: Rules need to be specific enough to be useful but general enough to be applicable across projects.
3. Multi-Agent Coordination: Implementing effective planner-executor patterns requires clear role definition and communication protocols.
4. Knowledge Integration: Incorporating insights from multiple sources while maintaining consistency.
5. Adaptation to Different AI Models: Guidelines need to work effectively with different AI models (Claude, GPT, etc.).

### Verifiable Success Criteria
- Creation of 3 specialized cursorrules files covering different development domains
- Implementation of a functional Multi-Agent system in the main cursorrules file
- Comprehensive documentation of patterns and best practices
- Easy adaptation for specific project requirements
- Improved AI assistance quality compared to basic instructions

### High-level Task Breakdown
1. Research and Analysis
   - Examine existing cursorrules repositories
   - Identify common patterns and best practices
   - Analyze effective AI interaction techniques
2. Core Cursorrules Development
   - Create main cursorrules file with Multi-Agent system
   - Document core principles and guidelines
3. Specialized Cursorrules Creation
   - Develop frontend-specific cursorrules
   - Develop backend-specific cursorrules
   - Develop AI integration pattern cursorrules
4. Documentation and Examples
   - Create comprehensive README
   - Document usage instructions
   - Provide customization examples
5. Testing and Refinement
   - Test cursorrules in real projects
   - Refine based on feedback
   - Iterate on improvement areas

### Current Status / Progress Tracking
- ✅ Research: Analyzed awesome-cursorrules repository
- ✅ Core Development: Created main .cursorrules file with Multi-Agent system
- ✅ Specialized Cursorrules: Created 3 specialized cursorrules files
- ✅ Documentation: Updated README with usage instructions
- ✅ Tools Enhancement: Added Ollama integration for local LLM testing
- ✅ Tools Enhancement: Created screenshot utility with Playwright
- ✅ Tools Enhancement: Added support for specialized Ollama models (code, multimodal)
- ✅ Testing: Created automated test script for Multi-Agent functionality
- ✅ Architecture: Implemented advanced modular cursor rules architecture
- ✅ Architecture: Created comprehensive documentation for cursor rules structure
- ⏳ Testing and Refinement: Initial testing completed with 92% success rate

### Next Steps and Action Items
1. Fix remaining issues in automated tests (Hacker News page scraping)
2. Document installation and setup process in the README
3. Add support for additional LLM providers (Ollama integration already complete)
4. Create examples for different development domains
5. Test the cursorrules in real-world development scenarios

### Executor's Feedback or Assistance Requests
- Successfully integrated Ollama as a local LLM provider, allowing testing without external API keys
- Added screenshot capabilities with Playwright for capturing and analyzing web content
- Added comprehensive error handling for Ollama integration, including model availability checks
- Created a model registry with specialized information about different Ollama models
- Implemented automated testing for all components (Planner, Executor, web tools)
- The search engine functionality requires API keys for optimal results - consider implementing a fallback mechanism for local development scenarios
- Added a requirements.txt file to document all dependencies

## Project Structure and Conventions

- **/src**: Main source code directory
- **/docs**: Documentation files
- **/tools**: Utility scripts and tools
- **/examples**: Example implementations

## Code Style Guidelines

- Use TypeScript for type safety where applicable
- Prefer functional programming approaches
- Use descriptive variable and function names
- Include proper documentation for complex functions
- Use consistent formatting based on the language style guides

## Common Tools and Libraries

- React/Next.js for frontend development
- FastAPI/Django for backend development
- Tailwind CSS for styling
- Jest/Pytest for testing
- Git for version control

## AI Optimization Techniques

- Provide context about the project structure and architecture
- Include examples of existing code patterns to follow
- Define domain-specific terminology
- Specify preferred error handling patterns
- Outline testing methodologies

## Advanced Features

### Environment-Aware Reasoning
The AI should adjust its suggestions based on the development environment, target platform, and performance requirements.

### Context Preservation
Maintain awareness of previously discussed topics and solutions throughout the conversation.

### Multi-Modal Support
Utilize the AI's ability to process and understand both text and images when analyzing UI/UX designs.

## Lessons

### User Specified Lessons
- Always initialize the environment before starting
- Include debug information in outputs for better troubleshooting
- Validate inputs thoroughly before processing

### System Learned Lessons
- Effective cursorrules should provide context about project structure and architecture
- Include specific guidance for styling conventions and component design
- Define common tools and libraries to ensure consistency
- Balance between detail and flexibility in guidelines
- For local LLM testing, Ollama provides a convenient alternative to external API keys
- When working with screenshots, ensure proper error handling for different browser states
- LLaVA model in Ollama can process images, but may have limitations in detailed analysis
- Implement robust error handling for LLM API calls, especially for local models
- Use feature detection to gracefully fall back when certain capabilities aren't available
- Provide clear categorization of models by capability (general, code, multimodal) 